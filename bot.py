# bot.py
import asyncio
import threading
import os
import queue
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from db_utils import (
    init_db, get_user_role, save_user, create_trip, get_trip, assign_driver_to_trip,
    mark_arrived, complete_trip, get_all_drivers, get_tariffs, get_driver_rating,
    save_rating, get_cancellation_reasons, ban_user, unban_user, is_user_banned,
    update_passenger_message_id, update_driver_message_id, update_driver_card_message_id,
    update_passenger_fare_message_id, update_passenger_eta_message_id,
    update_driver_fare_message_id, update_driver_eta_message_id,
    update_driver_control_message_id, update_passenger_arrival_message_id,
    update_driver_tariff_message_id, update_driver_eta_select_message_id,
    get_ban_info, BROADCAST_QUEUE
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
DB = init_db()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN", "your_bot_token")
ORDER_TIMEOUT = 10  # –º–∏–Ω—É—Ç

ACTIVE_ORDER_MESSAGES = {}
ACTIVE_DRIVERS = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OrderState(StatesGroup):
    waiting_for_pickup = State()
    waiting_for_destination = State()

class ManualFareState(StatesGroup):
    waiting_for_fare = State()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def check_ban(user_id):
    if is_user_banned(user_id):
        ban_info = get_ban_info(user_id)
        if ban_info:
            reason, banned_until = ban_info
            if banned_until:
                banned_until_date = datetime.strptime(banned_until, '%Y-%m-%d %H:%M:%S')
                days_left = (banned_until_date - datetime.now()).days
                duration_text = f"–Ω–∞ {days_left} –¥–Ω–µ–π"
            else:
                duration_text = "–Ω–∞–≤—Å–µ–≥–¥–∞"
            try:
                await bot.send_message(
                    user_id, 
                    f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}, {duration_text}."
                )
            except:
                pass
        return True
    return False

async def cancel_trip_cleanup(trip_id, cancelled_by, reason_text=None):
    trip = get_trip(trip_id)
    if not trip:
        return
    passenger_id = trip[1]
    driver_id = trip[2]
    messages_to_delete = [
        (passenger_id, trip[11]), (driver_id, trip[12]), (passenger_id, trip[13]),
        (passenger_id, trip[14]), (passenger_id, trip[15]), (driver_id, trip[16]),
        (driver_id, trip[17]), (driver_id, trip[18]), (passenger_id, trip[19]),
        (driver_id, trip[21]), (driver_id, trip[22])
    ]
    for chat_id, msg_id in messages_to_delete:
        if msg_id:
            try:
                await bot.delete_message(chat_id=chat_id, message_id=msg_id)
            except:
                pass
    if trip_id in ACTIVE_ORDER_MESSAGES:
        for drv_id, msg_id in ACTIVE_ORDER_MESSAGES[trip_id].items():
            try:
                await bot.delete_message(chat_id=drv_id, message_id=msg_id)
            except:
                pass
        del ACTIVE_ORDER_MESSAGES[trip_id]
    if cancelled_by == 'driver':
        if driver_id: 
            await bot.send_message(driver_id, f"‚úÖ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason_text}")
        if passenger_id: 
            await bot.send_message(passenger_id, f"‚ùå –í–æ–¥–∏—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason_text}")
    elif cancelled_by == 'passenger':
        if passenger_id: 
            await bot.send_message(passenger_id, f"‚úÖ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason_text}")
        if driver_id: 
            await bot.send_message(driver_id, f"‚ùå –ü–∞—Å—Å–∞–∂–∏—Ä –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason_text}")
    elif cancelled_by == 'admin':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ –æ—Ç–º–µ–Ω–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º
        if passenger_id:
            await bot.send_message(passenger_id, f"‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º. –ü—Ä–∏—á–∏–Ω–∞: {reason_text or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}")
        if driver_id:
            await bot.send_message(driver_id, f"‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º. –ü—Ä–∏—á–∏–Ω–∞: {reason_text or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}")
    cur = DB.cursor()
    if cancelled_by == 'admin':
        status = 'cancelled'
    else:
        status = 'cancelled_by_driver' if cancelled_by == 'driver' else 'cancelled_by_passenger'
    cur.execute("UPDATE trips SET status = ?, cancellation_reason = ? WHERE id = ?", (status, reason_text, trip_id))
    DB.commit()

def get_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöï –í—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏", callback_data="order_taxi")],
        [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
         InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")]
    ])

def get_driver_menu():
    """–ú–µ–Ω—é –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöó –°—Ç–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º", callback_data="become_available")],
        [InlineKeyboardButton(text="üö´ –ü–µ—Ä–µ—Å—Ç–∞—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã", callback_data="stop_accepting")],
        [InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")],
        [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
         InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])

def get_back_menu():
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

# –•–µ–Ω–¥–ª–µ—Ä—ã Telegram
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if await check_ban(message.from_user.id):
        return
    save_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
    welcome_text = (
        "üöï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É —Ç–∞–∫—Å–∏!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    user_role = get_user_role(message.from_user.id) or "passenger"
    if user_role == "driver":
        await message.answer(welcome_text, reply_markup=get_driver_menu())
    else:
        await message.answer(welcome_text, reply_markup=get_main_menu())

@dp.message(Command("menu"))
async def cmd_menu(message: types.Message):
    if await check_ban(message.from_user.id):
        return
    user_role = get_user_role(message.from_user.id) or "passenger"
    if user_role == "driver":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_driver_menu())
    else:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline-–∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "main_menu")
async def main_menu_callback(callback: types.CallbackQuery):
    if await check_ban(callback.from_user.id):
        return
    user_role = get_user_role(callback.from_user.id) or "passenger"
    if user_role == "driver":
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_driver_menu())
    else:
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
    await callback.answer()

@dp.callback_query(lambda c: c.data == "order_taxi")
async def order_taxi_callback(callback: types.CallbackQuery, state: FSMContext):
    if await check_ban(callback.from_user.id):
        return
    if get_user_role(callback.from_user.id) != "passenger":
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –ø–∞—Å—Å–∞–∂–∏—Ä—ã –º–æ–≥—É—Ç –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∞–∫—Å–∏.", show_alert=True)
        return
    await callback.message.edit_text(
        "üìç <b>–ó–∞–∫–∞–∑ —Ç–∞–∫—Å–∏</b>\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ç–æ—á–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>:",
        parse_mode="HTML",
        reply_markup=get_back_menu()
    )
    await state.set_state(OrderState.waiting_for_pickup)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "become_available")
async def become_available_callback(callback: types.CallbackQuery):
    if await check_ban(callback.from_user.id):
        return
    if get_user_role(callback.from_user.id) != "driver":
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏.", show_alert=True)
        return
    ACTIVE_DRIVERS.add(callback.from_user.id)
    await callback.message.edit_text(
        "‚úÖ <b>–í—ã —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤!</b>\n"
        "–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
        "–ß—Ç–æ–±—ã –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã, –Ω–∞–∂–º–∏—Ç–µ ¬´üö´ –ü–µ—Ä–µ—Å—Ç–∞—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã¬ª.",
        parse_mode="HTML",
        reply_markup=get_back_menu()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "stop_accepting")
async def stop_accepting_callback(callback: types.CallbackQuery):
    if await check_ban(callback.from_user.id):
        return
    if get_user_role(callback.from_user.id) != "driver":
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.", show_alert=True)
        return
    if callback.from_user.id in ACTIVE_DRIVERS:
        ACTIVE_DRIVERS.remove(callback.from_user.id)
    await callback.message.edit_text(
        "üö´ <b>–í—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–∞–∫–∞–∑—ã</b>\n"
        "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã, –Ω–∞–∂–º–∏—Ç–µ ¬´üöó –°—Ç–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º¬ª.",
        parse_mode="HTML",
        reply_markup=get_back_menu()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "my_stats")
async def my_stats_callback(callback: types.CallbackQuery):
    if await check_ban(callback.from_user.id):
        return
    user_role = get_user_role(callback.from_user.id)
    if user_role == "driver":
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è - –¢–û–õ–¨–ö–û –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏
        cur = DB.cursor()
        cur.execute('''
            SELECT 
                COUNT(DISTINCT t.id) as completed_orders,
                SUM(t.fare) as total_earnings,
                AVG(r.rating) as avg_rating
            FROM users u
            LEFT JOIN trips t ON u.telegram_id = t.driver_id AND t.status = 'completed'
            LEFT JOIN ratings r ON t.id = r.trip_id
            WHERE u.telegram_id = ?
        ''', (callback.from_user.id,))
        stats = cur.fetchone()
        completed_orders = stats[0] or 0
        total_earnings = stats[1] or 0
        avg_rating = round(stats[2], 1) if stats[2] else "–µ—â–µ –Ω–µ—Ç"
        stats_text = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üöó –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–µ–∑–¥–æ–∫: <b>{completed_orders}</b>\n"
            f"üí∞ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: <b>{total_earnings:.2f} ‚ÇΩ</b>\n"
            f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: <b>{avg_rating}</b>\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
        )
    else:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞
        cur = DB.cursor()
        cur.execute('''
            SELECT COUNT(*) 
            FROM trips 
            WHERE passenger_id = ? AND status = 'completed'
        ''', (callback.from_user.id,))
        completed_trips = cur.fetchone()[0] or 0
        stats_text = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üöï –°–æ–≤–µ—Ä—à–µ–Ω–æ –ø–æ–µ–∑–¥–æ–∫: <b>{completed_trips}</b>\n"
            f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—à—É —Å–ª—É–∂–±—É —Ç–∞–∫—Å–∏! ‚ù§Ô∏è"
        )
    await callback.message.edit_text(
        stats_text,
        parse_mode="HTML",
        reply_markup=get_back_menu()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "contacts")
async def contacts_callback(callback: types.CallbackQuery):
    if await check_ban(callback.from_user.id):
        return
    contact_info = (
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–ª—É–∂–±—ã —Ç–∞–∫—Å–∏</b>\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∂–∞–ª–æ–±–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>+7 (XXX) XXX-XX-XX</b>\n"
        "üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <b>–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ</b>\n"
        "‚úâÔ∏è Email: <b>support@taxi.ru</b>\n"
        "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã —É–ª—É—á—à–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å! üôè"
    )
    await callback.message.edit_text(
        contact_info,
        parse_mode="HTML",
        reply_markup=get_back_menu()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "help")
async def help_callback(callback: types.CallbackQuery):
    if await check_ban(callback.from_user.id):
        return
    user_role = get_user_role(callback.from_user.id) or "passenger"
    if user_role == "driver":
        help_text = (
            "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π</b>\n"
            "üöó <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å:</b>\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´üöó –°—Ç–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º¬ª\n"
            "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö\n"
            "‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ\n"
            "üí∞ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ –∏–∑ —Å–ø–∏—Å–∫–∞\n"
            "‚Ä¢ –ò–ª–∏ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—é —Å—É–º–º—É –≤—Ä—É—á–Ω—É—é\n"
            "‚è±Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–æ–π:</b>\n"
            "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è\n"
            "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏–±—ã—Ç–∏–µ –Ω–∞ –º–µ—Å—Ç–æ\n"
            "‚Ä¢ –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–æ–µ–∑–¥–∫—É –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è\n"
            "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª ¬´–ö–æ–Ω—Ç–∞–∫—Ç—ã¬ª\n"
            "‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"
        )
    else:
        help_text = (
            "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤</b>\n"
            "üöï <b>–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏:</b>\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´–í—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏¬ª\n"
            "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n"
            "‚Ä¢ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è\n"
            "üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ:</b>\n"
            "‚Ä¢ –ü–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ –≤—ã —É–≤–∏–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è\n"
            "‚Ä¢ –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ –≥–æ—Å. –Ω–æ–º–µ—Ä\n"
            "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ä–µ–π—Ç–∏–Ω–≥\n"
            "‚≠ê <b>–û—Ü–µ–Ω–∫–∞ –ø–æ–µ–∑–¥–∫–∏:</b>\n"
            "‚Ä¢ –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏ –æ—Ü–µ–Ω–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è\n"
            "‚Ä¢ –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞\n"
            "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª ¬´–ö–æ–Ω—Ç–∞–∫—Ç—ã¬ª\n"
            "‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"
        )
    await callback.message.edit_text(
        help_text,
        parse_mode="HTML",
        reply_markup=get_back_menu()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏
@dp.message(OrderState.waiting_for_pickup)
async def process_pickup(message: types.Message, state: FSMContext):
    if await check_ban(message.from_user.id):
        await state.clear()
        return
    if not message.text:
        await message.answer("üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º.")
        return
    await state.update_data(pickup=message.text)
    await message.answer(
        "üìç –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>:",
        parse_mode="HTML",
        reply_markup=get_back_menu()
    )
    await state.set_state(OrderState.waiting_for_destination)

@dp.message(OrderState.waiting_for_destination)
async def process_destination(message: types.Message, state: FSMContext):
    if await check_ban(message.from_user.id):
        await state.clear()
        return
    if not message.text:
        await message.answer("üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º.")
        return
    data = await state.get_data()
    pickup = data["pickup"]
    destination = message.text
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    trip_id = create_trip(message.from_user.id, pickup, destination)
    sent_passenger = await message.answer(
        "üöï <b>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É</b>\n"
        f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {pickup}\n"
        f"üìç <b>–ö—É–¥–∞:</b> {destination}\n"
        "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è...",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_passenger_{trip_id}")]
        ])
    )
    update_passenger_message_id(trip_id, sent_passenger.message_id)
    # –†–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º –≤–æ–¥–∏—Ç–µ–ª—è–º
    active_drivers = [driver_id for driver_id in ACTIVE_DRIVERS if not is_user_banned(driver_id)]
    if not active_drivers:
        await message.answer("‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π.")
    else:
        ACTIVE_ORDER_MESSAGES[trip_id] = {}
        for driver_id in active_drivers:
            sent_driver = await bot.send_message(
                driver_id,
                "üöï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n"
                f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {pickup}\n"
                f"üìç <b>–ö—É–¥–∞:</b> {destination}\n"
                "–ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü—Ä–∏–Ω—è—Ç—å¬ª, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –∑–∞–∫–∞–∑.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{trip_id}"),
                        InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"reject_{trip_id}")
                    ]
                ]),
                parse_mode="HTML"
            )
            ACTIVE_ORDER_MESSAGES[trip_id][driver_id] = sent_driver.message_id
    await state.clear()

# Callback-—Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
@dp.callback_query(lambda c: c.data.startswith("accept_"))
async def accept_trip(callback: types.CallbackQuery):
    if await check_ban(callback.from_user.id):
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å
    if callback.from_user.id not in ACTIVE_DRIVERS:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞–Ω—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.", show_alert=True)
        return
    trip_id = int(callback.data.split("_")[1])
    if assign_driver_to_trip(trip_id, callback.from_user.id):
        if trip_id in ACTIVE_ORDER_MESSAGES:
            for drv_id, msg_id in ACTIVE_ORDER_MESSAGES[trip_id].items():
                if drv_id != callback.from_user.id:
                    try:
                        await bot.delete_message(chat_id=drv_id, message_id=msg_id)
                    except:
                        pass
            del ACTIVE_ORDER_MESSAGES[trip_id]
        trip = get_trip(trip_id)
        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
        await callback.message.edit_text(
            f"‚úÖ <b>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>\n"
            f"üìã <b>–ó–∞–∫–∞–∑ ‚Ññ{trip_id}</b>\n"
            f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {trip[4]}\n"
            f"üìç <b>–ö—É–¥–∞:</b> {trip[5]}\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_driver_{trip_id}")]
            ])
        )
        update_driver_message_id(trip_id, callback.message.message_id)
        # –¢–∞—Ä–∏—Ñ—ã + –∫–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        tariffs = get_tariffs()
        kb_rows = []
        for _, name, price in tariffs:
            kb_rows.append([InlineKeyboardButton(text=f"{name} ‚Äî {price} ‚ÇΩ", callback_data=f"setfare_{trip_id}_{price}")])
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        kb_rows.append([InlineKeyboardButton(text="üí∞ –£–∫–∞–∑–∞—Ç—å —Å–≤–æ—é —Å—É–º–º—É", callback_data=f"manual_fare_{trip_id}")])
        tariff_message = await bot.send_message(
            callback.from_user.id, 
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏:", 
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb_rows)
        )
        update_driver_tariff_message_id(trip_id, tariff_message.message_id)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ –ø–∞—Å—Å–∞–∂–∏—Ä—É
        cur = DB.cursor()
        driver = cur.execute("""
            SELECT full_name, car_brand, car_model, license_plate, phone_number, payment_number, bank_name
            FROM users WHERE telegram_id = ?
        """, (callback.from_user.id,)).fetchone()
        driver_rating = get_driver_rating(callback.from_user.id)
        if driver:
            full_name, car_brand, car_model, license_plate, phone_number, payment_number, bank_name = driver
            car_info = f"{car_brand} {car_model}".strip()
            rating_text = f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {driver_rating}/5" if driver_rating else "‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫"
            driver_card = (
                "üë§ <b>–í–∞—à –≤–æ–¥–∏—Ç–µ–ª—å:</b>\n"
                f"üìõ <b>–ò–º—è:</b> {full_name or '‚Äî'}\n"
                f"üöó <b>–ê–≤—Ç–æ:</b> {car_info or '‚Äî'}\n"
                f"üî¢ <b>–ì–æ—Å. –Ω–æ–º–µ—Ä:</b> {license_plate or '‚Äî'}\n"
                f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone_number or '‚Äî'}\n"
                f"üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b> {payment_number or '‚Äî'}\n"
                f"üè¶ <b>–ë–∞–Ω–∫:</b> {bank_name or '‚Äî'}\n"
                f"{rating_text}"
            )
        else:
            driver_card = f"üë§ <b>–í–∞—à –≤–æ–¥–∏—Ç–µ–ª—å:</b> @{callback.from_user.username or callback.from_user.id}"
            if driver_rating:
                driver_card += f"\n‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {driver_rating}/5"
        try:
            sent_card = await bot.send_message(
                trip[1], 
                driver_card, 
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_passenger_{trip_id}")]
                ])
            )
            update_driver_card_message_id(trip_id, sent_card.message_id)
        except:
            pass
    else:
        await callback.message.edit_text("‚ö†Ô∏è –ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º.")
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("manual_fare_"))
async def manual_fare_callback(callback: types.CallbackQuery, state: FSMContext):
    if await check_ban(callback.from_user.id):
        return
    trip_id = int(callback.data.split("_")[2])
    await state.update_data(trip_id=trip_id)
    await callback.message.edit_text(
        "üí∞ <b>–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250 –∏–ª–∏ 350.50):",
        parse_mode="HTML",
        reply_markup=get_back_menu()
    )
    await state.set_state(ManualFareState.waiting_for_fare)
    await callback.answer()

@dp.message(ManualFareState.waiting_for_fare)
async def process_manual_fare(message: types.Message, state: FSMContext):
    if await check_ban(message.from_user.id):
        await state.clear()
        return
    try:
        fare = float(message.text.replace(',', '.'))
        if fare <= 0:
            await message.answer("‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250 –∏–ª–∏ 350.50).")
        return
    data = await state.get_data()
    trip_id = data["trip_id"]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    cur = DB.cursor()
    cur.execute("UPDATE trips SET fare = ? WHERE id = ?", (fare, trip_id))
    DB.commit()
    trip = get_trip(trip_id)
    passenger_id = trip[1]
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
    await message.answer(
        f"‚úÖ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:</b> {fare:.2f} ‚ÇΩ",
        parse_mode="HTML"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä—É
    sent_fare = await bot.send_message(
        passenger_id,
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏:</b> {fare:.2f} ‚ÇΩ\n"
        f"–í–æ–¥–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ –ø—Ä–∏–µ–¥–µ—Ç!",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_passenger_{trip_id}")]
        ])
    )
    update_passenger_fare_message_id(trip_id, sent_fare.message_id)
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è
    time_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="5 –º–∏–Ω", callback_data=f"eta_{trip_id}_5"),
            InlineKeyboardButton(text="10 –º–∏–Ω", callback_data=f"eta_{trip_id}_10"),
            InlineKeyboardButton(text="15 –º–∏–Ω", callback_data=f"eta_{trip_id}_15")
        ],
        [
            InlineKeyboardButton(text="20 –º–∏–Ω", callback_data=f"eta_{trip_id}_20"),
            InlineKeyboardButton(text="30 –º–∏–Ω", callback_data=f"eta_{trip_id}_30"),
            InlineKeyboardButton(text=">30 –º–∏–Ω", callback_data=f"eta_{trip_id}_60")
        ]
    ])
    eta_select_message = await bot.send_message(
        message.from_user.id, 
        "‚è±Ô∏è <b>–£–∫–∞–∂–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:</b>", 
        parse_mode="HTML",
        reply_markup=time_kb
    )
    update_driver_eta_select_message_id(trip_id, eta_select_message.message_id)
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("reject_"))
async def reject_trip(callback: types.CallbackQuery):
    if await check_ban(callback.from_user.id):
        return
    trip_id = int(callback.data.split("_")[1])
    try:
        await callback.message.delete()
    except:
        pass
    if trip_id in ACTIVE_ORDER_MESSAGES and callback.from_user.id in ACTIVE_ORDER_MESSAGES[trip_id]:
        del ACTIVE_ORDER_MESSAGES[trip_id][callback.from_user.id]
    await callback.answer("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞")

@dp.callback_query(lambda c: c.data.startswith("setfare_"))
async def set_fare(callback: types.CallbackQuery):
    if await check_ban(callback.from_user.id):
        return
    _, trip_id_str, fare_str = callback.data.split("_")
    trip_id = int(trip_id_str)
    fare = float(fare_str)
    cur = DB.cursor()
    cur.execute("UPDATE trips SET fare = ? WHERE id = ?", (fare, trip_id))
    DB.commit()
    trip = get_trip(trip_id)
    passenger_id = trip[1]
    update_driver_fare_message_id(trip_id, callback.message.message_id)
    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
    await callback.message.edit_text(
        f"‚úÖ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:</b> {fare:.2f} ‚ÇΩ",
        parse_mode="HTML"
    )
    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞
    sent_fare = await bot.send_message(
        passenger_id,
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏:</b> {fare:.2f} ‚ÇΩ\n"
        f"–í–æ–¥–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ –ø—Ä–∏–µ–¥–µ—Ç!",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_passenger_{trip_id}")]
        ])
    )
    update_passenger_fare_message_id(trip_id, sent_fare.message_id)
    time_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="5 –º–∏–Ω", callback_data=f"eta_{trip_id}_5"),
            InlineKeyboardButton(text="10 –º–∏–Ω", callback_data=f"eta_{trip_id}_10"),
            InlineKeyboardButton(text="15 –º–∏–Ω", callback_data=f"eta_{trip_id}_15")
        ],
        [
            InlineKeyboardButton(text="20 –º–∏–Ω", callback_data=f"eta_{trip_id}_20"),
            InlineKeyboardButton(text="30 –º–∏–Ω", callback_data=f"eta_{trip_id}_30"),
            InlineKeyboardButton(text=">30 –º–∏–Ω", callback_data=f"eta_{trip_id}_60")
        ]
    ])
    eta_select_message = await bot.send_message(
        callback.from_user.id, 
        "‚è±Ô∏è <b>–£–∫–∞–∂–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:</b>", 
        parse_mode="HTML",
        reply_markup=time_kb
    )
    update_driver_eta_select_message_id(trip_id, eta_select_message.message_id)

@dp.callback_query(lambda c: c.data.startswith("eta_"))
async def set_eta(callback: types.CallbackQuery):
    if await check_ban(callback.from_user.id):
        return
    _, trip_id_str, minutes_str = callback.data.split("_")
    trip_id = int(trip_id_str)
    minutes = int(minutes_str)
    trip = get_trip(trip_id)
    if not trip or not trip[1]:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    passenger_id = trip[1]
    text = f"–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–±—É–¥–µ—Ç –Ω–∞ –º–µ—Å—Ç–æ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç" if minutes != 60 else "–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–±—É–¥–µ—Ç –Ω–∞ –º–µ—Å—Ç–æ –±–æ–ª–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç"
    sent_eta = await bot.send_message(
        passenger_id, 
        f"‚è±Ô∏è <b>{text}</b>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_passenger_{trip_id}")]
        ])
    )
    update_passenger_eta_message_id(trip_id, sent_eta.message_id)
    update_driver_eta_message_id(trip_id, callback.message.message_id)
    ride_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üöó –Ø –Ω–∞ –º–µ—Å—Ç–µ", callback_data=f"arrived_{trip_id}"),
            InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_{trip_id}")
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_driver_{trip_id}")
        ]
    ])
    control_message = await callback.message.answer(
        f"‚úÖ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞—Å—Å–∞–∂–∏—Ä—É.</b>\n"
        f"{text}\n"
        f"<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–æ–π:</b>",
        parse_mode="HTML",
        reply_markup=ride_kb
    )
    update_driver_control_message_id(trip_id, control_message.message_id)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("arrived_"))
async def confirm_arrival(callback: types.CallbackQuery):
    if await check_ban(callback.from_user.id):
        return
    trip_id = int(callback.data.split("_")[1])
    mark_arrived(trip_id)
    trip = get_trip(trip_id)
    try:
        arrival_message = await bot.send_message(
            trip[1], 
            "üöó <b>–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–∏–±—ã—Ç–∏–µ! –ü–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å.</b>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_passenger_{trip_id}")]
            ])
        )
        update_passenger_arrival_message_id(trip_id, arrival_message.message_id)
    except:
        pass
    complete_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data=f"complete_{trip_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_driver_{trip_id}")]
    ])
    await callback.message.edit_text(
        "‚úÖ <b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–∏–±—ã—Ç–∏–µ. –ü–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>\n"
        "–ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É' –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏.",
        parse_mode="HTML",
        reply_markup=complete_kb
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("cancel_driver_") and not c.data.startswith("cancel_driver_reason_"))
async def cancel_by_driver(callback: types.CallbackQuery):
    if await check_ban(callback.from_user.id):
        return
    trip_id = int(callback.data.split("_")[2])
    reasons = get_cancellation_reasons('driver')
    if not reasons:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω –æ—Ç–º–µ–Ω—ã")
        return
    keyboard = [[InlineKeyboardButton(text=reason_text, callback_data=f"cancel_driver_reason_{trip_id}_{reason_id}")] for reason_id, reason_text in reasons]
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("cancel_driver_reason_"))
async def cancel_driver_reason(callback: types.CallbackQuery):
    if await check_ban(callback.from_user.id):
        return
    parts = callback.data.split("_")
    trip_id = int(parts[3])
    reason_id = int(parts[4])
    cur = DB.cursor()
    reason = cur.execute("SELECT reason_text FROM cancellation_reasons WHERE id = ?", (reason_id,)).fetchone()
    reason_text = reason[0] if reason else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    await cancel_trip_cleanup(trip_id, 'driver', reason_text)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("cancel_passenger_") and not c.data.startswith("cancel_passenger_reason_"))
async def cancel_by_passenger(callback: types.CallbackQuery):
    if await check_ban(callback.from_user.id):
        return
    trip_id = int(callback.data.split("_")[2])
    reasons = get_cancellation_reasons('passenger')
    if not reasons:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω –æ—Ç–º–µ–Ω—ã")
        return
    keyboard = [[InlineKeyboardButton(text=reason_text, callback_data=f"cancel_passenger_reason_{trip_id}_{reason_id}")] for reason_id, reason_text in reasons]
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("cancel_passenger_reason_"))
async def cancel_passenger_reason(callback: types.CallbackQuery):
    if await check_ban(callback.from_user.id):
        return
    parts = callback.data.split("_")
    trip_id = int(parts[3])
    reason_id = int(parts[4])
    cur = DB.cursor()
    reason = cur.execute("SELECT reason_text FROM cancellation_reasons WHERE id = ?", (reason_id,)).fetchone()
    reason_text = reason[0] if reason else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    await cancel_trip_cleanup(trip_id, 'passenger', reason_text)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("complete_"))
async def complete_ride(callback: types.CallbackQuery):
    if await check_ban(callback.from_user.id):
        return
    trip_id = int(callback.data.split("_")[1])
    trip = get_trip(trip_id)
    if not trip:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    passenger_id = trip[1]
    driver_id = trip[2]
    fare = trip[6] or 0
    messages_to_delete = [
        (passenger_id, trip[11]), (driver_id, trip[12]), (passenger_id, trip[13]),
        (passenger_id, trip[14]), (passenger_id, trip[15]), (driver_id, trip[16]),
        (driver_id, trip[17]), (driver_id, trip[18]), (passenger_id, trip[19]),
        (driver_id, trip[21]), (driver_id, trip[22])
    ]
    for chat_id, msg_id in messages_to_delete:
        if msg_id:
            try:
                await bot.delete_message(chat_id=chat_id, message_id=msg_id)
            except:
                pass
    try:
        await callback.message.delete()
    except:
        pass
    try:
        await bot.send_message(
            passenger_id,
            "üèÅ <b>–ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚≠ê", callback_data=f"rate_{trip_id}_1"),
                    InlineKeyboardButton(text="‚≠ê‚≠ê", callback_data=f"rate_{trip_id}_2"),
                    InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê", callback_data=f"rate_{trip_id}_3"),
                    InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_{trip_id}_4"),
                    InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_{trip_id}_5")
                ]
            ])
        )
    except: 
        pass
    try:
        await bot.send_message(
            driver_id,
            f"‚úÖ <b>–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.</b>\n"
            f"üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {fare:.2f} ‚ÇΩ\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç –ø–∞—Å—Å–∞–∂–∏—Ä–∞...",
            parse_mode="HTML"
        )
    except: 
        pass
    complete_trip(trip_id)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("rate_"))
async def rate_driver(callback: types.CallbackQuery):
    try:
        _, trip_id_str, rating_str = callback.data.split("_")
        trip_id = int(trip_id_str)
        rating = int(rating_str)
        trip = get_trip(trip_id)
        if not trip or trip[1] != callback.from_user.id:
            await callback.answer("–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏.", show_alert=True)
            return
        if rating < 1 or rating > 5:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞.", show_alert=True)
            return
        save_rating(trip_id, trip[2], callback.from_user.id, rating)
        await callback.message.edit_text(
            f"‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!</b>\n"
            f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {rating} ‚≠ê\n"
            f"–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! üöñ",
            parse_mode="HTML"
        )
        # –ü–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_role = get_user_role(callback.from_user.id) or "passenger"
        if user_role == "driver":
            await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_driver_menu())
        else:
            await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
        driver_rating = get_driver_rating(trip[2])
        try:
            await bot.send_message(
                trip[2],
                f"‚≠ê <b>–ü–∞—Å—Å–∞–∂–∏—Ä –æ—Ü–µ–Ω–∏–ª –≤–∞—à—É —Ä–∞–±–æ—Ç—É:</b> {rating}/5\n"
                f"üìä <b>–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {driver_rating or '–µ—â–µ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫'}",
                parse_mode="HTML"
            )
        except:
            pass
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ—Ü–µ–Ω–∫–µ: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
    await callback.answer()

# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
async def process_broadcast_queue():
    while True:
        try:
            if not BROADCAST_QUEUE.empty():
                task = BROADCAST_QUEUE.get()
                user_ids = task["user_ids"]
                message_text = task["message_text"]
                success_count = 0
                for user_id in user_ids:
                    try:
                        await bot.send_message(chat_id=user_id, text=message_text)
                        success_count += 1
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")
                print(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{len(user_ids)}")
            await asyncio.sleep(1)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
            await asyncio.sleep(5)

async def cancel_expired_orders():
    while True:
        try:
            cur = DB.cursor()
            cur.execute("""
                SELECT id, passenger_id
                FROM trips
                WHERE status = 'requested'
                  AND datetime(created_at) < datetime('now', '-{} minutes')
            """.format(ORDER_TIMEOUT))
            expired = cur.fetchall()
            for trip_id, passenger_id in expired:
                cur2 = DB.cursor()
                cur2.execute("UPDATE trips SET status = 'expired' WHERE id = ?", (trip_id,))
                DB.commit()
                # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —É –ø–∞—Å—Å–∞–∂–∏—Ä–∞
                if trip_id in ACTIVE_ORDER_MESSAGES:
                    for drv_id, msg_id in ACTIVE_ORDER_MESSAGES[trip_id].items():
                        try:
                            await bot.delete_message(chat_id=drv_id, message_id=msg_id)
                        except:
                            pass
                    del ACTIVE_ORDER_MESSAGES[trip_id]
                # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –∏–∑ –ë–î
                cur3 = DB.cursor()
                cur3.execute("SELECT passenger_message_id FROM trips WHERE id = ?", (trip_id,))
                passenger_msg_id = cur3.fetchone()
                if passenger_msg_id and passenger_msg_id[0]:
                    try:
                        await bot.delete_message(chat_id=passenger_id, message_id=passenger_msg_id[0])
                    except:
                        pass
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä—É
                try:
                    await bot.send_message(
                        passenger_id,
                        f"‚ùå <b>–ó–∞–∫–∞–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω—ë–Ω</b>\n"
                        f"–ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è–ª –µ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–µ {ORDER_TIMEOUT} –º–∏–Ω—É—Ç.",
                        parse_mode="HTML"
                    )
                except:
                    pass
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ cancel_expired_orders: {e}")
        await asyncio.sleep(30)

# –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞
import dashboard
def run_flask():
    flask_app = dashboard.create_app()
    flask_app.run(host="0.0.0.0", port=5000, debug=False, use_reloader=False)

async def main():
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    print("üöÄ Flask –¥–∞—à–±–æ—Ä–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:5000")
    asyncio.create_task(process_broadcast_queue())
    asyncio.create_task(cancel_expired_orders())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
